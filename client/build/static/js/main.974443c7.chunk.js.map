{"version":3,"sources":["components/Display.jsx","components/PetForm.jsx","components/PetEdit.jsx","components/Details.jsx","App.js","serviceWorker.js","index.js"],"names":["Display","props","useState","pets","setPets","useEffect","axios","get","then","res","console","log","data","catch","err","className","scope","map","pet","i","key","_id","name","petType","to","PetForm","setName","setPetType","description","setDescription","skill1","setSkill1","skill2","setSkill2","skill3","setSkill3","errors","setErrors","onSubmit","e","preventDefault","PetItem","post","navigate","type","placeholder","onChange","target","value","properties","message","PetEdit","put","Details","setPet","onClick","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.974443c7.chunk.js","sourcesContent":["import React, { useState, UseEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link } from \"@reach/router\";\r\n\r\n\r\nconst Display = props => {\r\n    const [pets, setPets] = useState([]);\r\n\r\n    useEffect( () => {\r\n        axios.get(\"http://localhost:8000/api/pet\")\r\n            .then(res => {\r\n                console.log(res);\r\n                setPets(res.data);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Hello</h1>\r\n            <div>\r\n                <table className=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">Name</th>\r\n                        <th scope=\"col\">Type</th>\r\n                        <th scope=\"col\">Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {pets.map( (pet, i) => \r\n                    <tr key={pet._id}>\r\n                        <th scope=\"row\">{pet.name}</th>\r\n                        <td>{pet.petType}</td>\r\n                    <td><Link className=\"btn btn-outline-success\" to={`/edit/${pet._id}`}>Edit</Link>/\r\n                    <Link className=\"btn btn-outline-success\" to={`/details/${pet._id}`}>Details</Link></td>\r\n                    </tr>\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Display;","import React, { useState } from 'react';\r\nimport { navigate } from \"@reach/router\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst PetForm = props => {\r\n    const [name, setName]=useState(\"\");\r\n    const [petType, setPetType] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [skill1, setSkill1] = useState(\"\");\r\n    const [skill2, setSkill2] = useState(\"\");\r\n    const [skill3, setSkill3] = useState(\"\");\r\n    const [errors, setErrors] =useState({});\r\n\r\n    const CreatePet = e => {\r\n        e.preventDefault();\r\n        const PetItem = {name, petType, description, skill1, skill2, skill3};\r\n        axios.post(\"http://localhost:8000/api/pet\", PetItem)\r\n            .then(res =>{\r\n                console.log(res);\r\n                if(res.data.errors){\r\n                    setErrors(res.data.errors);\r\n                } else {\r\n                    navigate(\"/\");\r\n                }\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={CreatePet}>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <label >Name</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Name\" onChange={e => setName(e.target.value)}/>\r\n                        {errors.name ?\r\n                        <p className=\"text-danger\">{errors.name.properties.message}</p>:\"\" }\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label >Skill</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Skill\" onChange={e => setSkill1(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row my-5\">\r\n                <div className=\"col\">\r\n                        <label >Pet Type</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Pet Type\" onChange={e => setPetType(e.target.value)}/>\r\n                        {errors.petType ?\r\n                        <p className=\"text-danger\">{errors.petType.properties.message}</p>:\"\" }\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label>Skill 2</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Skill 2\" onChange={e => setSkill2(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row my-5\">\r\n                <div className=\"col\">\r\n                        <label>Description</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Description\"onChange={e => setDescription(e.target.value)}/>\r\n                        {errors.description ?\r\n                        <p className=\"text-danger\">{errors.description.properties.message}</p>:\"\" }\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label>Skill 3</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Skill 3\"onChange={e => setSkill3(e.target.value)}/>\r\n                    </div>\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-success btn-block\" value=\"Add new pet\" />\r\n            </form>\r\n    )\r\n\r\n}\r\n\r\nexport default PetForm;","import React, { useState, useEffect } from 'react';\r\nimport { navigate } from \"@reach/router\";\r\nimport axios from 'axios';\r\n\r\n\r\nconst PetEdit = props => {\r\n    const [name, setName]=useState(\"\");\r\n    const [petType, setPetType] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const [skill1, setSkill1] = useState(\"\");\r\n    const [skill2, setSkill2] = useState(\"\");\r\n    const [skill3, setSkill3] = useState(\"\");\r\n    const [errors, setErrors] =useState({});\r\n\r\n    useEffect( () => {\r\n        console.log(props._id);\r\n        axios.get(`http://localhost:8000/api/pet/${props._id}`)\r\n            .then( res =>{\r\n                console.log(res);\r\n                setName(res.data.name);\r\n                setDescription(res.data.description);\r\n                setPetType(res.data.petType);\r\n                setSkill1(res.data.skill1);\r\n                setSkill2(res.data.skill2);\r\n                setSkill3(res.data.skill3);\r\n            }).catch(errors => console.log(errors) );\r\n    }, [props._id])\r\n\r\n    const UpdatePet = e => {\r\n        e.preventDefault();\r\n        const PetItem = {name, petType, description, skill1, skill2, skill3};\r\n        axios.put(`http://localhost:8000/api/pet/${props._id}`, PetItem)\r\n            .then(res =>{\r\n                console.log(res);\r\n                if(res.data.errors){\r\n                    setErrors(res.data.errors);\r\n                } else {\r\n                    navigate(\"/\");\r\n                }\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={UpdatePet}>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <label >Name</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Name\" onChange={e => setName(e.target.value)} value={name}/>\r\n                        {errors.name ?\r\n                        <p className=\"text-danger\">{errors.name.properties.message}</p>:\"\" }\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label >Skill</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Skill\" onChange={e => setSkill1(e.target.value)} value={skill1}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row my-5\">\r\n                <div className=\"col\">\r\n                        <label >Pet Type</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Pet Type\" onChange={e => setPetType(e.target.value)} value={petType}/>\r\n                        {errors.petType ?\r\n                        <p className=\"text-danger\">{errors.petType.properties.message}</p>:\"\" }\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label>Skill 2</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Skill 2\" onChange={e => setSkill2(e.target.value)} value={skill2}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row my-5\">\r\n                <div className=\"col\">\r\n                        <label>Description</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Description\"onChange={e => setDescription(e.target.value)} value ={description}/>\r\n                        {errors.description ?\r\n                        <p className=\"text-danger\">{errors.description.properties.message}</p>:\"\" }\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <label>Skill 3</label>\r\n                        <input type=\"text\" className=\"form-control\" placeholder=\"Skill 3\"onChange={e => setSkill3(e.target.value)} value={skill3}/>\r\n                    </div>\r\n                </div>\r\n                <input type=\"submit\" className=\"btn btn-success btn-block\" value=\"Update Pet Information\" />\r\n            </form>\r\n    )\r\n\r\n}\r\n\r\nexport default PetEdit;","import React, { useState, UseEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Link, navigate } from \"@reach/router\";\r\n\r\n\r\nconst Details = props => {\r\n    const [pet, setPet] = useState({});\r\n\r\n    useEffect( () => {\r\n        axios.get(`http://localhost:8000/api/pet/${props._id}`)\r\n            .then(res => {\r\n                console.log(res);\r\n                setPet(res.data);\r\n        })\r\n        .catch(err => console.log(err));\r\n    }, []);\r\n    \r\n\r\n\r\n    const remove = _id => {\r\n        console.log(_id);\r\n        axios.delete(`http://localhost:8000/api/pet/${_id}`)\r\n            .then(res => {\r\n                console.log(res);\r\n                navigate(\"/\");\r\n        })\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <button className=\"btn btn-outline-danger float-right\" onClick={e => remove(pet._id)}>Adopt!</button>\r\n            <h1>Details about : {pet.name}</h1>\r\n            <div className=\"jumbotron\">\r\n                <h1>Pet Type: {pet.petType} </h1>\r\n                <h1>Description: {pet.description}</h1>\r\n                <ul><h1>Skills</h1></ul>\r\n                <li>{pet.skill1}</li>\r\n                <li>{pet.skill2}</li>\r\n                <li>{pet.skill3}</li>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Details;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Display from './components/Display';\nimport {Link, Router} from '@reach/router';\nimport PetForm from './components/PetForm';\nimport PetEdit from './components/PetEdit';\nimport Details from './components/Details';\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Pet Shelter App</h1>\n      \n      <Link className= \"btn btn-info\" to=\"/\">Pets</Link>\n      <Link className= \"btn btn-info\" to=\"/new\">New Pets!</Link>\n      <Router className=\"my-5\">\n        <Display path= \"/\" />\n        <PetForm path= \"/new\"/>\n        <PetEdit path=\"/edit/:_id\"/>\n        <Details path=\"/details/:_id\"/>\n      </Router>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}